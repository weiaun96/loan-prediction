/********************************/
Name of DS: Mr Ong (TP063332)
Name of SAS program: dap_assignment_tp063332.sas
Description: DAP Assignment
Date first written: Thu, 11-Nov-2021
Date last updated: Mon, 20-Dec-2021
Folder name: DAP_FT_SEP_2021_TP063332
Library name: LIB07070
***************************************/;

TITLE1 'Structure of the Dataset (Data Dictionary)';
PROC CONTENTS DATA = LIB07070.TRAINING_DS;
RUN;

TITLE 'Univariate Analysis of the categorical variable: MARITAL_STATUS';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE MARITAL_STATUS;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBAR MARITAL_STATUS;
TITLE 'Univariate Analysis of the categorical variable: MARITAL_STATUS';
RUN;

TITLE 'Univariate Analysis of the categorical variable: GENDER';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE GENDER;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBAR GENDER;
TITLE 'Univariate Analysis of the categorical variable: GENDER';
RUN;

TITLE 'Univariate Analysis of the categorical variable: LOAN_LOCATION';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE LOAN_LOCATION;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBAR LOAN_LOCATION;
TITLE 'Univariate Analysis of the categorical variable: LOAN_LOCATION';
RUN;

TITLE 'Univariate Analysis of the categorical variable: QUALIFICATION';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE QUALIFICATION;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBAR QUALIFICATION;
TITLE 'Univariate Analysis of the categorical variable: QUALIFICATION';
RUN;

TITLE 'Univariate Analysis of the categorical variable: FAMILY_MEMBERS';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE FAMILY_MEMBERS;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBAR FAMILY_MEMBERS;
TITLE 'Univariate Analysis of the categorical variable: FAMILY_MEMBERS';
RUN;

PROC MEANS DATA = LIB07070.TRAINING_DS N NMISS MIN MAX MEAN MEDIAN STD;
VAR CANDIDATE_INCOME;
TITLE 'Univariate Analysis of the continuous variable: CANDIDATE_INCOME';
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
HISTOGRAM CANDIDATE_INCOME;
TITLE 'Univariate Analysis of the continuous variable: CANDIDATE_INCOME';
RUN;

PROC MEANS DATA = LIB07070.TRAINING_DS N NMISS MIN MAX MEAN MEDIAN STD;
VAR LOAN_AMOUNT;
TITLE 'Univariate Analysis of the continuous variable: LOAN_AMOUNT';
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
HISTOGRAM LOAN_AMOUNT;
TITLE 'Univariate Analysis of the continuous variable: LOAN_AMOUNT';
RUN;

PROC MEANS DATA = LIB07070.TRAINING_DS N NMISS MIN MAX MEAN MEDIAN STD;
VAR GUARANTEE_INCOME;
TITLE 'Univariate Analysis of the continuous variable: GUARANTEE_INCOME';
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
HISTOGRAM GUARANTEE_INCOME;
TITLE 'Univariate Analysis of the continuous variable: GUARANTEE_INCOME';
RUN;

PROC MEANS DATA = LIB07070.TRAINING_DS N NMISS MIN MAX MEAN MEDIAN STD;
VAR LOAN_DURATION;
TITLE 'Univariate Analysis of the continuous variable: LOAN_DURATION';
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = LIB07070.TRAINING_DS;
HISTOGRAM LOAN_DURATION;
TITLE 'Univariate Analysis of the continuous variable: LOAN_DURATION';
RUN;

TITLE1 'Bivariate Analysis of the variables (Categorical vs Categorical) found in the LIB07070.TRAINING_DS';
TITLE1 'Bivariate Analysis of the variables (GENDER vs LOAN_APPROVAL_STATUS)';
FOOTNOTE '-----END-----';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE GENDER * LOAN_APPROVAL_STATUS /
PLOTS = FREQPLOT ( TWOWAY = STACKED SCALE =GROUPPCT );  
RUN;

TITLE1 'Bivariate Analysis of the variables (Categorical vs Categorical) found in the LIB07070.TRAINING_DS';
TITLE2 'Bivariate Analysis of the variables (LOAN_HISTORY vs LOAN_APPROVAL_STATUS)';
FOOTNOTE '-----END-----';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE LOAN_HISTORY * LOAN_APPROVAL_STATUS /
PLOTS = FREQPLOT ( TWOWAY = STACKED SCALE =GROUPPCT );  
RUN;

TITLE1 'Bivariate Analysis of the variables (Categorical vs Categorical) found in the LIB07070.TRAINING_DS';
TITLE2 'Bivariate Analysis of the variables (MARITAL_STATUS vs LOAN_APPROVAL_STATUS)';
FOOTNOTE '-----END-----';
PROC FREQ DATA = LIB07070.TRAINING_DS;
TABLE MARITAL_STATUS * LOAN_APPROVAL_STATUS /
PLOTS = FREQPLOT ( TWOWAY = STACKED SCALE =GROUPPCT );  
RUN;

TITLE1 'Bivariate Analysis of the variables (Categorical vs Continuous) found in the LIB07070.TRAINING_DS';
TITLE1 'Bivariate Analysis of the variables (LOAN_LOCATION vs CANDIDATE_INCOME)';

PROC MEANS DATA = LIB07070.TRAINING_DS;
CLASS LOAN_LOCATION; /* CHAR */
VAR CANDIDATE_INCOME; /*NUMERIC*/
RUN;

PROC SGPLOT DATA = LIB07070.TRAINING_DS;
VBOX CANDIDATE_INCOME / CATEGORY=LOAN_LOCATION;
/*LL X-AXIS CI Y-AXIS */
TITLE 'Bivariate Analysis on LOAN_LOCATION vs CANDIDATE_INCOME';
RUN;

/******************/
TITLE 'Find the Categorical and Continuous variables with missing values';
PROC FORMAT;
VALUE $missfmt ' ' = 'Missing' others = 'Not missing';
VALUE  missfmt .   = 'Missing' others = 'Not missing';
RUN;

PROC FREQ DATA=LIB07070.TRAINING_DS;
FORMAT _CHAR_ $missfmt.;
FORMAT _NUMERIC_ missfmt.;

TABLE _CHAR_ / missing nocum nopercent;
TABLE _NUMERIC_ / missing nocum nopercent;
RUN;

/**********VARIABLE 1: GENDER***********/
TITLE 'STEP 1: Make a copy of the dataset LIB07070.TRAINING_DS before imputing missing values';
PROC SQL;
CREATE TABLE LIB07070.TRAINING_DS_FI AS
SELECT * FROM LIB07070.TRAINING_DS;
QUIT;


TITLE 'LIST THE OBSERVATIONS WITH MISSING VALUES IN GENDER VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'STEP 2: Create a dataset to hold the gender and number of applicants';
PROC SQL;
CREATE TABLE LIB07070.TRAINING_DS_FI_GENDER AS
SELECT GENDER, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( GENDER IS NOT MISSING ) OR
		( GENDER IS NOT NULL ) OR
		( GENDER NE '' ) )
GROUP BY GENDER;

QUIT;

TITLE 'STEP 3: Display the contents of the dataset LIB07070.TRAINING_DS_FI_GENDER';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI_GENDER;

QUIT;


TITLE 'STEP 4: Impute the missing values found in the GENDER variable';
PROC SQL;

UPDATE LIB07070.TRAINING_DS_FI
SET GENDER = ( SELECT GENDER
			   FROM LIB07070.TRAINING_DS_FI_GENDER
			   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   FROM LIB07070.TRAINING_DS_FI_GENDER ) )
										   /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( GENDER IS MISSING ) OR
		( GENDER IS NULL ) OR
		( GENDER EQ '' ) );
QUIT;

TITLE 'STEP 5: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN GENDER VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

/*************VARIABLE 2: EMPLOYMENT*************/

TITLE 'LIST THE OBSERVATIONS WITH MISSING VALUES IN EMPLOYMENT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'STEP 2: Create a dataset to hold the EMPLOYMENT and number of applicants';
PROC SQL;
CREATE TABLE LIB07070.TRAINING_DS_FI_EMPLOYMENT AS
SELECT EMPLOYMENT, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( EMPLOYMENT IS NOT MISSING ) OR
		( EMPLOYMENT IS NOT NULL ) OR
		( EMPLOYMENT NE '' ) )
GROUP BY EMPLOYMENT;

QUIT;

TITLE 'STEP 3: Display the contents of the dataset LIB07070.TRAINING_DS_FI_EMPLOYMENT';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI_EMPLOYMENT;

QUIT;


TITLE 'STEP 4: Impute the missing values found in the EMPLOYMENT variable';
PROC SQL;

UPDATE LIB07070.TRAINING_DS_FI
SET EMPLOYMENT = ( SELECT EMPLOYMENT
			   FROM LIB07070.TRAINING_DS_FI_EMPLOYMENT
			   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   FROM LIB07070.TRAINING_DS_FI_EMPLOYMENT ) )
										   /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( EMPLOYMENT IS MISSING ) OR
		( EMPLOYMENT IS NULL ) OR
		( EMPLOYMENT EQ '' ) );
QUIT;

TITLE 'STEP 5: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN EMPLOYMENT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;


/**********VARIABLE 3: MARITAL STATUS***********/

TITLE 'LIST THE OBSERVATIONS WITH MISSING VALUES IN MARITAL_STATUS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( MARITAL_STATUS IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( MARITAL_STATUS IS MISSING );
QUIT;

TITLE 'STEP 2: Create a dataset to hold the gender and number of applicants';
PROC SQL;
CREATE TABLE LIB07070.TRAINING_DS_FI_MS AS
SELECT MARITAL_STATUS, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( MARITAL_STATUS IS NOT MISSING ) OR
		( MARITAL_STATUS IS NOT NULL ) OR
		( MARITAL_STATUS NE '' ) )
GROUP BY MARITAL_STATUS;

QUIT;

TITLE 'STEP 3: Display the contents of the dataset LIB07070.TRAINING_DS_FI_MS';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI_MS;

QUIT;


TITLE 'STEP 4: Impute the missing values found in the GENDER variable';
PROC SQL;

UPDATE LIB07070.TRAINING_DS_FI
SET MARITAL_STATUS = ( SELECT MARITAL_STATUS
			   		   FROM LIB07070.TRAINING_DS_FI_MS
			  		   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   		   FROM LIB07070.TRAINING_DS_FI_MS ) )
										   		   /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( MARITAL_STATUS IS MISSING ) OR
		( MARITAL_STATUS IS NULL ) OR
		( MARITAL_STATUS EQ '' ) );
QUIT;

TITLE 'STEP 5: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN MARITAL_STATUS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( MARITAL_STATUS IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( MARITAL_STATUS IS MISSING );
QUIT;

/***********VARIABLE 4: FAMILY_MEMBERS***********/

TITLE 'STEP 1: LIST THE OBSERVATIONS WITH MISSING VALUES IN FAMILY_MEMBERS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'STEP 2 : DISPLAY THE DETAILS OF APPLICANTS WITH 3+ FAMILY MEMBERS';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;


PROC SQL;
SELECT COUNT(*) Label 'No of Applicants'
FROM LIB07070.TRAINING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 3 : Replace 3+ with 3';

PROC SQL;
UPDATE LIB07070.TRAINING_DS_FI
SET FAMILY_MEMBERS = SUBSTR(FAMILY_MEMBERS,1,1)
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 4 : After replacing 3+ with 3';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;


PROC SQL;
SELECT COUNT(*) Label 'No of Applicants'
FROM LIB07070.TRAINING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 5: Create a dataset to hold the family members and number of applicants';

PROC SQL;

CREATE TABLE LIB07070.TRAINING_DS_FI_FAMILY_MEMBERS AS
SELECT FAMILY_MEMBERS, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS NOT MISSING ) OR
		( FAMILY_MEMBERS IS NOT NULL ) OR
		( FAMILY_MEMBERS NE '' ) )
GROUP BY FAMILY_MEMBERS;

QUIT;

TITLE 'STEP 6: Display the contents of the dataset LIB07070.TRAINING_DS_FI_FAMILY_MEMBERS';

PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI_FAMILY_MEMBERS;

QUIT;

TITLE 'STEP 7: Impute the missing values found in the FAMILY_MEMBERS variable';
PROC SQL;

UPDATE LIB07070.TRAINING_DS_FI
SET FAMILY_MEMBERS = ( SELECT FAMILY_MEMBERS
			   		   FROM LIB07070.TRAINING_DS_FI_FAMILY_MEMBERS
					   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   			FROM LIB07070.TRAINING_DS_FI_FAMILY_MEMBERS ) )
										  		    /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'STEP 8: AFTER IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN FAMILY_MEMBERS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;




/***********VARIABLE 5: LOAN_DURATION***********/

TITLE 'STEP 1: BEFORE IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_DURATION VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'STEP 2: IMPUTE THE MISSING VALUES IN LOAN_DURATION';

PROC STDIZE DATA=LIB07070.TRAINING_DS_FI REPONLY

METHOD=MEAN OUT=LIB07070.TRAINING_DS_FI;
VAR LOAN_DURATION;

QUIT;


TITLE 'STEP 3: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_DURATION VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;


SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;



/**********VARIABLE 6: LOAN_AMOUNT***********/

TITLE 'STEP 1: BEFORE IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_AMOUNT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'STEP 2: IMPUTE THE MISSING VALUES IN LOAN_AMOUNT';

PROC STDIZE DATA=LIB07070.TRAINING_DS_FI REPONLY

METHOD=MEAN OUT=LIB07070.TRAINING_DS_FI;
VAR LOAN_AMOUNT;

QUIT;


TITLE 'STEP 3: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_AMOUNT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;


SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;


/*********VARIABLE 6: LOAN_HISTORY************/

TITLE 'LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_HISTORY VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'STEP 2: DISPLAY MEDIAN';
PROC SQL;
SELECT
MEDIAN(LOAN_HISTORY) LABEL = 'MEDIAN-LOAN HISTORY'
FROM LIB07070.TRAINING_DS_FI
WHERE ( ( LOAN_HISTORY IS NOT MISSING ) OR
		( LOAN_HISTORY NE . ) );
QUIT;



TITLE 'STEP 3: Impute the missing values found in the LOAN_HISTORY variable';

PROC SQL;
CREATE TABLE LIB07070.TRAINING_DS_FI_LH AS
SELECT *
FROM LIB07070.TRAINING_DS_FI;

QUIT;

PROC SQL;

UPDATE LIB07070.TRAINING_DS_FI_LH
SET LOAN_HISTORY = ( SELECT MEDIAN(ti.LOAN_HISTORY) Label 'Loan Median'
						FROM LIB07070.TRAINING_DS_FI ti
						WHERE ( ( ti.LOAN_HISTORY IS NOT MISSING ) OR
								( ti.LOAN_HISTORY NE . ) ) ) /* It is a sub-program to find median value */

WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );

QUIT;


TITLE 'STEP 4: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_HISTORY VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;


SELECT *
FROM LIB07070.TRAINING_DS_FI_LH
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TRAINING_DS_FI_LH
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

/*******RECHECK ALL MISSING DATA TO CONFIRM IMPUTATION DONE***********/
TITLE 'Find the Categorical and Continuous variables with missing values';
PROC FORMAT;
VALUE $missfmt ' ' = 'Missing' others = 'Not missing';
VALUE  missfmt .   = 'Missing' others = 'Not missing';
RUN;

PROC FREQ DATA=LIB07070.TRAINING_DS_FI_LH;
FORMAT _CHAR_ $missfmt.;
FORMAT _NUMERIC_ missfmt.;

TABLE _CHAR_ / missing nocum nopercent;
TABLE _NUMERIC_ / missing nocum nopercent;
RUN;



/* MACRO MACRO_FOR_UNIVARIATE ANALYSIS BEGINS HERE */
/* SAS MACRO FOR UNIVARIATE ANALYSIS OF CATEGORICAL VARIABLES*/
%MACRO MACRO_UVA_LIB07070_TESTING_DS(PDS_NAME, PVARI_NAME, PTITLE_NAME);
PROC FREQ DATA = &PDS_NAME;

TABLE &PVARI_NAME;
TITLE &PTITLE_NAME;

QUIT;

%MEND MACRO_UVA_LIB07070_TESTING_DS;

/* MACRO MACRO_FOR_UNIVARIATE ANALYSIS ENDS HERE */

/*CALL/RUN THE SAS MACRO */

%MACRO_UVA_LIB07070_TESTING_DS (LIB07070.TESTING_DS, EMPLOYMENT, "UNIVARIATE ANALYSIS OF THE CATEGORICAL VARIABLE - EMPLOYMENT");
%MACRO_UVA_LIB07070_TESTING_DS (LIB07070.TESTING_DS, GENDER, "UNIVARIATE ANALYSIS OF THE CATEGORICAL VARIABLE - GENDER");
%MACRO_UVA_LIB07070_TESTING_DS (LIB07070.TESTING_DS, QUALIFICATION, "UNIVARIATE ANALYSIS OF THE CATEGORICAL VARIABLE - QUALIFICATION");
%MACRO_UVA_LIB07070_TESTING_DS (LIB07070.TESTING_DS, MARITAL_STATUS, "UNIVARIATE ANALYSIS OF THE CATEGORICAL VARIABLE - MARITAL_STATUS");

/* SAS MACRO FOR UNIVARIATE ANALYSIS OF CONTINUOUS VARIABLES*/

%MACRO MACRO_UNIV_CONT_VARI(PDS_NAME, PVARI_NAME, PTITLE_1, PTITLE_NAME_2);

TITLE &PTITLE_1;
PROC MEANS DATA = &PDS_NAME N NMISS MIN MAX MEAN MEDIAN STD;
VAR &PVARI_NAME;
RUN;
ODS GRAPHICS / RESET WIDTH=4.0 IN HEIGHT=3.0 IN IMAGEMAP;
PROC SGPLOT DATA = &PDS_NAME;
HISTOGRAM &PVARI_NAME;
TITLE &PTITLE_NAME_2;
RUN;

%MEND MACRO_UNIV_CONT_VARI;

/* To call the SAS MACRO MACRO_UNIV_CONT_VARI */
%MACRO_UNIV_CONT_VARI (LIB07070.TESTING_DS, LOAN_AMOUNT,
'Figure 7.8.3 Univariate Analysis variable: LOAN_AMOUNT',
'Figure 7.8.3 Univariate Analysis variable: LOAN_AMOUNT');

%MACRO_UNIV_CONT_VARI (LIB07070.TESTING_DS, CANDIDATE_INCOME,
'Figure 7.8.3 Univariate Analysis variable: CANDIDATE_INCOME',
'Figure 7.8.3 Univariate Analysis variable: CANDIDATE_INCOME');

%MACRO_UNIV_CONT_VARI (LIB07070.TESTING_DS, GUARANTEE_INCOME,
'Figure 7.8.3 Univariate Analysis variable: GUARANTEE_INCOME',
'Figure 7.8.3 Univariate Analysis variable: GUARANTEE_INCOME');

/* SAS MACRO FOR BIVARIATE ANALYSIS OF CATEGORICAL VARIABLES*/
%MACRO MACRO_BVAR_CATEG_VARI_TP063332(PDS_NAME,PVARI_1,PVARI_2,PTITLE_1,PTITLE_2);

PROC FREQ DATA = &PDS_NAME;

TABLE &PVARI_1 * &PVARI_2 /
PLOTS=FREQPLOT(TWOWAY=STACKED SCALE=GROUPPCT);
TITLE1 &PTITLE_1;
TITLE2 &PTITLE_2;

RUN;

%MEND MACRO_BVAR_CATEG_VARI_TP063332;

/* To call the macro - MACRO_BVAR_CATEG_VARI_TP063332*/

%MACRO_BVAR_CATEG_VARI_TP063332(LIB07070.TESTING_DS,
MARITAL_STATUS,LOAN_LOCATION,"BIVARIATE ANALYSIS OF CATEGORICAL VARIABLES","MARITAL_STATUS-Categorical vs LOAN_LOCATION-Categorical")

%MACRO_BVAR_CATEG_VARI_TP063332(LIB07070.TESTING_DS,
EMPLOYMENT,LOAN_HISTORY,"BIVARIATE ANALYSIS OF CATEGORICAL VARIABLES","EMPLOYMENT-Categorical vs LOAN_HISTORY-Categorical")

%MACRO_BVAR_CATEG_VARI_TP063332(LIB07070.TESTING_DS,
GENDER,FAMILY_MEMBERS,"BIVARIATE ANALYSIS OF CATEGORICAL VARIABLES","GENDER-Categorical vs FAMILY_MEMBERS-Categorical")

%MACRO_BVAR_CATEG_VARI_TP063332(LIB07070.TESTING_DS,
GENDER,LOAN_LOCATION,"BIVARIATE ANALYSIS OF CATEGORICAL VARIABLES","GENDER-Categorical vs LOAN_LOCATION-Categorical")

QUIT;


/********TESTING_DS**********/
/********TESTING_DS**********/

TITLE 'Before imputing the missing values, find the categorical and continuous variables with missing values';
PROC FORMAT;

VALUE $missfmt ' ' = 'Missing' others = 'Not missing';
VALUE  missfmt .   = 'Missing' others = 'Not missing';

RUN;

PROC FREQ DATA=LIB07070.TESTING_DS;

FORMAT _CHAR_ $missfmt.;
FORMAT _NUMERIC_ missfmt.;

TABLE _CHAR_ / missing nocum nopercent;
TABLE _NUMERIC_ / missing nocum nopercent;

RUN;

/* Wed,8-Dec-2021 */

/*********VARIABLE 1: GENDER************/
TITLE 'STEP 1: Make a copy of the dataset LIB07070.TESTING_DS before imputing missing values';
PROC SQL;
CREATE TABLE LIB07070.TESTING_DS_FI AS
SELECT * FROM LIB07070.TESTING_DS;
QUIT;


TITLE 'LIST THE OBSERVATIONS WITH MISSING VALUES IN GENDER VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'STEP 2: Create a dataset to hold the gender and number of applicants';
PROC SQL;
CREATE TABLE LIB07070.TESTING_DS_FI_GENDER AS
SELECT GENDER, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TESTING_DS_FI
WHERE ( ( GENDER IS NOT MISSING ) OR
		( GENDER IS NOT NULL ) OR
		( GENDER NE '' ) )
GROUP BY GENDER;

QUIT;

TITLE 'STEP 3: Display the contents of the dataset LIB07070.TESTING_DS_FI_GENDER';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI_GENDER;

QUIT;


TITLE 'STEP 4: Impute the missing values found in the GENDER variable';
PROC SQL;

UPDATE LIB07070.TESTING_DS_FI
SET GENDER = ( SELECT GENDER
			   FROM LIB07070.TESTING_DS_FI_GENDER
			   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   FROM LIB07070.TESTING_DS_FI_GENDER ) )
										   /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( GENDER IS MISSING ) OR
		( GENDER IS NULL ) OR
		( GENDER EQ '' ) );
QUIT;

TITLE 'STEP 5: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN GENDER VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( GENDER IS MISSING );
QUIT;

/*********VARIABLE 2: FAMILY_MEMBERS*************/

TITLE 'STEP 1: LIST THE OBSERVATIONS WITH MISSING VALUES IN FAMILY_MEMBERS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'STEP 2 : DISPLAY THE DETAILS OF APPLICANTS WITH 3+ FAMILY MEMBERS';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;


PROC SQL;
SELECT COUNT(*) Label 'No of Applicants'
FROM LIB07070.TESTING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 3 : Replace 3+ with 3';

PROC SQL;
UPDATE LIB07070.TESTING_DS_FI
SET FAMILY_MEMBERS = SUBSTR(FAMILY_MEMBERS,1,1)
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 4 : After replacing 3+ with 3';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;


PROC SQL;
SELECT COUNT(*) Label 'No of Applicants'
FROM LIB07070.TESTING_DS_FI
WHERE ( SUBSTR(FAMILY_MEMBERS,2,1) EQ '+' );
QUIT;

TITLE 'STEP 5: Create a dataset to hold the family members and number of applicants';

PROC SQL;

CREATE TABLE LIB07070.TESTING_DS_FI_FAMILY_MEMBERS AS
SELECT FAMILY_MEMBERS, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TESTING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS NOT MISSING ) OR
		( FAMILY_MEMBERS IS NOT NULL ) OR
		( FAMILY_MEMBERS NE '' ) )
GROUP BY FAMILY_MEMBERS;

QUIT;

TITLE 'STEP 6: Display the contents of the dataset LIB07070.TESTING_DS_FI_FAMILY_MEMBERS';

PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI_FAMILY_MEMBERS;

QUIT;

TITLE 'STEP 7: Impute the missing values found in the FAMILY_MEMBERS variable';
PROC SQL;

UPDATE LIB07070.TESTING_DS_FI
SET FAMILY_MEMBERS = ( SELECT FAMILY_MEMBERS
			   		   FROM LIB07070.TESTING_DS_FI_FAMILY_MEMBERS
					   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   			FROM LIB07070.TESTING_DS_FI_FAMILY_MEMBERS ) )
										  		    /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'STEP 8: AFTER IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN FAMILY_MEMBERS VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( FAMILY_MEMBERS IS MISSING ) OR
		( FAMILY_MEMBERS IS NULL ) OR 
		( FAMILY_MEMBERS EQ '' ) );
QUIT;



/**********VARIABLE 3: EMPLOYMENT**************/

TITLE 'STEP 1: LIST THE OBSERVATIONS WITH MISSING VALUES IN EMPLOYMENT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'STEP 2: Create a dataset to hold the EMPLOYMENT and number of applicants';
PROC SQL;
CREATE TABLE LIB07070.TESTING_DS_FI_EMPLOYMENT AS
SELECT EMPLOYMENT, COUNT (*) AS NO_OF_APPLICANTS
FROM LIB07070.TESTING_DS_FI
WHERE ( ( EMPLOYMENT IS NOT MISSING ) OR
		( EMPLOYMENT IS NOT NULL ) OR
		( EMPLOYMENT NE '' ) )
GROUP BY EMPLOYMENT;

QUIT;

TITLE 'STEP 3: Display the contents of the dataset LIB07070.TESTING_DS_FI_EMPLOYMENT';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI_EMPLOYMENT;

QUIT;


TITLE 'STEP 4: Impute the missing values found in the EMPLOYMENT variable';
PROC SQL;

UPDATE LIB07070.TESTING_DS_FI
SET EMPLOYMENT = ( SELECT EMPLOYMENT
			   FROM LIB07070.TESTING_DS_FI_EMPLOYMENT
			   WHERE NO_OF_APPLICANTS EQ ( SELECT MAX(NO_OF_APPLICANTS) Label 'NO OF APPLICANTS'
										   FROM LIB07070.TESTING_DS_FI_EMPLOYMENT ) )
										   /*It is a sub-program to find the highest no of applicants*/
WHERE ( ( EMPLOYMENT IS MISSING ) OR
		( EMPLOYMENT IS NULL ) OR
		( EMPLOYMENT EQ '' ) );
QUIT;

TITLE 'STEP 5: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN EMPLOYMENT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( EMPLOYMENT IS MISSING );
QUIT;

/***********VARIABLE 4: LOAN_DURATION***********/

TITLE 'STEP 1: BEFORE IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_DURATION VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'STEP 2: IMPUTE THE MISSING VALUES IN LOAN_DURATION';

PROC STDIZE DATA=LIB07070.TESTING_DS_FI REPONLY

METHOD=MEAN OUT=LIB07070.TESTING_DS_FI;
VAR LOAN_DURATION;

QUIT;


TITLE 'STEP 3: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_DURATION VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;


SELECT *
FROM LIB07070.TESTING_DS_FI_LD
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI_LD
WHERE ( ( LOAN_DURATION IS MISSING ) OR
		( LOAN_DURATION EQ . ) );
QUIT;



/************VARIABLE 5: LOAN_AMOUNT*********/

TITLE 'STEP 1: BEFORE IMPUTING THE MISSING VALUES, LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_AMOUNT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'STEP 2: IMPUTE THE MISSING VALUES IN LOAN_AMOUNT';

PROC STDIZE DATA=LIB07070.TESTING_DS_FI REPONLY

METHOD=MEAN OUT=LIB07070.TESTING_DS_FI;
VAR LOAN_AMOUNT;

QUIT;


TITLE 'STEP 3: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_AMOUNT VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;


SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_AMOUNT IS MISSING ) OR
		( LOAN_AMOUNT EQ . ) );
QUIT;


/*******VARIABLE 6: LOAN HISTORY*******/

TITLE 'STEP 1: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_HISTORY VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'STEP 2: DISPLAY MEDIAN';
PROC SQL;
SELECT
MEDIAN(LOAN_HISTORY) LABEL = 'MEDIAN-LOAN HISTORY'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_HISTORY IS NOT MISSING ) OR
		( LOAN_HISTORY NE . ) );
QUIT;



TITLE 'STEP 3: Impute the missing values found in the LOAN_HISTORY variable';

PROC SQL;
CREATE TABLE LIB07070.TESTING_DS_FI_LH AS
SELECT *
FROM LIB07070.TESTING_DS_FI;

QUIT;

PROC SQL;

UPDATE LIB07070.TESTING_DS_FI_LH
SET LOAN_HISTORY = ( SELECT MEDIAN(ti.LOAN_HISTORY) Label 'Loan Median'
						FROM LIB07070.TESTING_DS_FI ti
						WHERE ( ( ti.LOAN_HISTORY IS NOT MISSING ) OR
								( ti.LOAN_HISTORY NE . ) ) ) /* It is a sub-program to find median value */

WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );

QUIT;


TITLE 'STEP 4: AFTER IMPUTING MISSING VALUES: LIST THE OBSERVATIONS WITH MISSING VALUES IN LOAN_HISTORY VARIABLE';
FOOTNOTE '-----END-----';
PROC SQL;
CREATE TABLE LIB07070.TESTING_DS_FI AS
SELECT *
FROM LIB07070.TESTING_DS_FI_LH;

QUIT;


PROC SQL;


SELECT *
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;

TITLE 'NUMBER OF OBSERVATIONS WITH MISSING VALUES';
FOOTNOTE '-----END-----';
PROC SQL;

SELECT COUNT (*) LABEL 'NUMBER OF OBSERVATIONS WITH MISSING VALUES'
FROM LIB07070.TESTING_DS_FI
WHERE ( ( LOAN_HISTORY IS MISSING ) OR
		( LOAN_HISTORY EQ . ) );
QUIT;


/*******RECHECK ALL MISSING DATA TO CONFIRM IMPUTATION DONE***********/
TITLE 'After imputing the missing values, find the categorical and continuous variables with missing values';
PROC FORMAT;

VALUE $missfmt ' ' = 'Missing' others = 'Not missing';
VALUE  missfmt .   = 'Missing' others = 'Not missing';

RUN;

PROC FREQ DATA=LIB07070.TESTING_DS_FI;

FORMAT _CHAR_ $missfmt.;
FORMAT _NUMERIC_ missfmt.;

TABLE _CHAR_ / missing nocum nopercent;
TABLE _NUMERIC_ / missing nocum nopercent;

RUN;






/*****BUILD LOGISTIC REGRESSION*******/
PROC LOGISTIC DATA=LIB07070.TRAINING_DS_FI_LH OUTMODEL=LIB07070.TRAINING_DS_FI_LH_MODEL;
CLASS
GENDER
LOAN_HISTORY
MARITAL_STATUS
QUALIFICATION
LOAN_LOCATION
FAMILY_MEMBERS
EMPLOYMENT;

/* Above are categorical variables */
MODEL LOAN_APPROVAL_STATUS = /*place here all independent variables */
/* LOAN_APPLICATION_STATUS is a dependent variable */

GENDER
LOAN_LOCATION
MARITAL_STATUS
QUALIFICATION
FAMILY_MEMBERS
LOAN_HISTORY
EMPLOYMENT
CANDIDATE_INCOME
GUARANTEE_INCOME
LOAN_AMOUNT
LOAN_DURATION;

OUTPUT OUT = LIB07070.TRAINING_DS_FI_LH_OUT P = PRED_PROB;
/*PRED_PROB ->PRedicted probability - variable to hold predicted probability
OUT -> the output will be stored in the dataset
Akaike Information criterion must ( AIC ) < SC (Schwarz Criterion)
*/
RUN;

/*If Pr > ChiSq is <=0.05, it means that the independent variable is an important variable
and as is truely contributing to the dependent variable prediction*/



/**********PREDICTION MODEL USING LRA******************/
TITLE 'Prediction Model Using the Logistic Regression';
FOOTNOTE '-----------END-----------';

PROC LOGISTIC INMODEL=LIB07070.TRAINING_DS_FI_LH_MODEL;				 /*It is the model you created*/

SCORE DATA=LIB07070.TESTING_DS_FI 									/*Test ds*/
OUT=LIB07070.TESTING_DS_FI_PREDICTION; 								/*location of output*/

QUIT;


/****View contents of the predictions*/

TITLE 'Results of the prediction model';
FOOTNOTE '-----END-----';

PROC SQL;

SELECT *
FROM LIB07070.TESTING_DS_FI_PREDICTION;

QUIT;

TITLE 'Number of Loans Approved';
FOOTNOTE '-----END-----';

PROC SQL;

SELECT COUNT(*) Label "NUMBER OF OBSERVATIONS WITH 'Y'"
FROM LIB07070.TESTING_DS_FI_PREDICTION
WHERE ( I_LOAN_APPROVAL_STATUS EQ 'Y' );

QUIT;



/****Application of ODS******/
/**To find the physical location of the library*/

PROC SQL;
CREATE VIEW LIB07070.VIEW_FOR_WAYNE AS
SELECT SME_LOAN_ID_NO,
GENDER,
FAMILY_MEMBERS,
EMPLOYMENT,
QUALIFICATION
FROM LIB07070.TESTING_DS_FI_PREDICTION;

QUIT;

PROC DATASETS library=LIB07070 memtype=DATA;
RUN;

PROC DATASETS library=LIB07070 memtype=VIEW;
RUN;

PROC SQL;

SELECT *
FROM LIB07070.VIEW_FOR_WAYNE;

QUIT;

/* ODS - Output Delivery System */

/* 1st method */
ODS HTML CLOSE;
ODS PDF CLOSE;

PDS PDF FILE="/home/u58868125/sasuser.v94/DAP_FT_SEP_2021_TP063332/REPORT.pdf";
OPTIONS NOBYLINE NODATE;
TITLE1 "Bank Loan Approval Status Predicted";
TITLE2 "APU,TPM";
FOOTNOTE '-----End of Report-----';

PROC REPORT DATA=LIB07070.TESTING_DS_FI_PREDICTION NOWINDOWS;

BY SME_LOAN_ID_NO; /* To separate each by SME LOAN ID NO */
/* COLUMN SME_LOAN_ID_NO I_LOAN_APPROVAL_STATUS;*/
DEFINE SME_LOAN_ID_NO / GROUP 'LOAN ID';
DEFINE I_LOAN_APPROVAL_STATUS / GROUP 'LOAN APPROVAL STATUS';
FOOTNOTE '-----End of Report-----';

RUN;
OPTIONS BYLINE;